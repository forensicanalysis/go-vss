name: CI
on:
  push:
    branches: [ master ]
  pull_request:
  schedule:
    - cron:  '0 0 * * *'

jobs:

  build_libvshadow_windows:
    name: Build libvshadow windows
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build libvshadow
        shell: bash
        run: make prepare_windows
      - name: Upload static libvshadow
        uses: actions/upload-artifact@v1
        with:
          name: libvshadow_windows
          path: libvshadow-20191221/libvshadow/.libs/libvshadow.a
      - name: Download static libvshadow
        uses: actions/download-artifact@v1
        with:
          name: libvshadow_windows

  build_libvshadow_ubuntu:
    name: Build libvshadow linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build libvshadow
        shell: bash
        run: make prepare_linux
      - name: Upload static libvshadow
        uses: actions/upload-artifact@v1
        with:
          name: libvshadow_linux
          path: libvshadow-20191221/libvshadow/.libs/libvshadow.a
      - name: Download static libvshadow
        uses: actions/download-artifact@v1
        with:
          name: libvshadow_linux

  build_libvshadow_macos:
    name: Build libvshadow macos
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build libvshadow
        shell: bash
        run: make prepare_macos
      - name: Upload static libvshadow
        uses: actions/upload-artifact@v1
        with:
          name: libvshadow_macos
          path: libvshadow-20191221/libvshadow/.libs/libvshadow.a
      - name: Download static libvshadow
        uses: actions/download-artifact@v1
        with:
          name: libvshadow_macos

  vss:
    name: go-vss
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
      fail-fast: false
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup go 1.14
        uses: actions/setup-go@v2
        with: {go-version: '1.14'}

      - name: Install golangci-lint & go-acc
        run: |
          curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh| sh -s -- -b $(go env GOPATH)/bin v1.25.0
          go get -u github.com/ory/go-acc
        shell: bash

      - name: Build
        run: make build

      - name: Download Testdata
        run: curl --fail --silent --output vss.raw.zip --location https://download.artifacthub.org/windows/vss.raw.zip

      - name: Test
        run: make test

      - name: Coverage
        run: make coverage

      - name: Lint
        run: golangci-lint run --verbose --config test/.golangci.yml --enable gofmt --enable goimports
        if: matrix.os != 'windows-latest'
      - name: Lint Windows
        run: golangci-lint run --verbose --config test/.golangci.yml
        if: matrix.os == 'windows-latest'
